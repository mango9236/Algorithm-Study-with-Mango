#===========================================여긴 코드 / 반성은 밑에=====================

N = int(input())
groupList = []
alpha = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']
for _ in range(N):
    words = list(input())

    # 그룹단어일 시 넣어서 len

    # 그룹단어가 안될 경우
    # 중복이 끝났을때 또 나오는경우
    
    # 중복을 제거
    for i in range(len(words)-1, 0, -1):
        if words[i] == words[i-1]:
            words.pop(i)
    # print(words)

    groupWords = False
    # 중복을 제거한 단어를 알파벳과 비교하여 없애고
    # 없앤 알파벳이 또 나오면 그룹단어가 아님
    for i in words:
        if i in alpha:
            alpha.remove(i)
            groupWords = True
        else:
            groupWords = False
            break
    alpha = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']
    # print(groupWords)
    if groupWords:
        groupList.append(words)
        
#print(groupList)
print(len(groupList))


#==============================================================================


내 코드는 
1. 그룹단어인지 판단할 words의 연속된 중복을 먼저 제거하여 단일화한 뒤
2. 모든 알파벳 리스트(a~z)와 비교하여 알파벳 리스트에서 words의 알파벳을 제거한 뒤
3. 제거된 알파벳이 또 등장할 시 그룹단어가 아니라 판단하고 break를 한다.

예를들어 happy는 
1. h a p y 가 되고
2. 알파벳 리스트에서 a,h,p,y가 제거됨

happya는
1. h a p y a 가 되고
2. 알파벳 리스트에서 a,h,p,y가 제거 되는데 마지막에 a가 또 제거되야하는데 없어서 그룹단어가 아니라 판
#================================================================================

선생님의 코드는 

# 현재 위치 단어와 다음 위치 단어가 다르고
# 현재 위치 단어가 2칸뒤의 단어들부터 존재하면 그룹단어 x
if word[j] != word[j+1] and word[j] in word[j+2:]: 
  check = False
  break

#=======================================================

나는 중복도 제거해야하고 알파벳 리스트에서 제거하며 비교를 하지만
선생님의 코드는 인접한 단어들과 비교 후 바로 판단이 가능해서 중복과,제거가 필요가없다

아직 자신이 없다. 평점 문제 풀러 가볼게

#=====================================================

2023-08-21 최민규: 정진하세요.






















